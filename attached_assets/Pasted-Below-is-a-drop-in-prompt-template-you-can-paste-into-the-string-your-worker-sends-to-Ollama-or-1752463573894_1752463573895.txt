Below is a drop-in **prompt template** you can paste into the string your worker sends to Ollama (or any model) **immediately after OCR + FAISS retrieval**.
It keeps the one-shot style you’re already using, but:

* asks for a **full, expanded summary** (≈ 150-200 words)
* asks for up-to-5 **concrete improvements** to the proposal
* asks for a **“toolkit” list** — libraries, APIs, or platforms the author should cite or add

---

````text
SYSTEM
You are LegalDoc AI, a concise, citation-aware assistant.  
Answer strictly from the provided context; never hallucinate statutes or page numbers.

#

USER
<<DOC_META>>
• file_name: {{file_name}}
• total_pages: {{page_count}}

<<CONTEXT>>
{{top_chunks}}      # 8-10 highest-ranked snippets, ≤400 chars each

<<TASKS>>
1. **Expanded summary** – 150-200 words that explain what the document is, its purpose, scope, target beneficiaries, funding ask, and key timeline items.  
2. **Improvements** – up to 5 numbered suggestions that would make this proposal more persuasive, complete, or fundable.  
3. **Recommended toolkit** – list the specific software, legal-tech libraries, or operational tools the clinic/proposal should incorporate (e.g., Clio, Docketwise, Lexis+), each with 1-sentence rationale.

Return the result in **exactly** this JSON shape and nothing else:

```json
{
  "summary": "<paragraph>",
  "improvements": ["<text>", "..."],
  "toolkit": ["<tool> – <why>", "..."]
}
````

````

---

### Where to drop it in Replit

* **backend/app/worker.py** (or wherever you call `ollama.chat`)  
  ```python
  prompt = PROMPT_TEMPLATE.format(
      file_name=file_name,
      page_count=len(pages),
      top_chunks="\n".join(chunks)
  )
  ai_json = ollama.chat(model="mistral:instruct", messages=[{"role":"user","content":prompt}])
  result = json.loads(ai_json["message"]["content"])
  save_results(job_id, result)        # write to results/<job_id>.json
````

* Keep your **classification / deadline extraction prompt** separate if you prefer, or merge them into this one by adding those fields to the JSON schema.

---

### Front-end change (optional)

In `ResultsDashboard.tsx`, after you load the results object:

```ts
const { summary, improvements, toolkit } = docData;

<Card /* AI Analysis */>
  <CardHeader>…</CardHeader>
  <CardContent>
    <h4>Expanded Summary</h4>
    <p className="whitespace-pre-wrap">{summary}</p>

    {improvements.length > 0 && (
      <>
        <h4 className="mt-4">Suggestions to Improve</h4>
        <ul className="list-disc list-inside">{improvements.map((s,i)=><li key={i}>{s}</li>)}</ul>
      </>
    )}

    {toolkit.length > 0 && (
      <>
        <h4 className="mt-4">Recommended Toolkit</h4>
        <ul className="list-disc list-inside">{toolkit.map((t,i)=><li key={i}>{t}</li>)}</ul>
      </>
    )}
  </CardContent>
</Card>
```

Now every processed document will show:

* a richer summary
* actionable upgrade ideas
* a tech/tool checklist — all from **one** inexpensive model call.
